<section xml:id="Intro-Programming" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>An Introduction to Programming</title>

    <objectives>
        <ul>
            <li>
                <p>
                    TBD
                </p>
            </li>
        </ul>
    </objectives>

    <observation>
        <p>
            Observation and question
        </p>
    </observation>

    <subsection>
        <title>Programming in Python</title>

        <p>
            After understanding how to follow a flowchart (more generally, understanding flow control), the next challenge of
            programming is understanding the programming syntax, which is how we actually write the code for the computer to follow. Since
            we will be reading code more than we will be writing it in this class, the focus is on understanding how the given code works
            and not on giving you a problem to solve and leaving you to figure out how to code it.
        </p>
        <p>
            We're going to oversimplify and talk about just two types of processes. The first is assigning a value to a variable. This code
            has the following form:
        </p>
        <listing>
            <caption>Assigning a Value to a Variable</caption>
            <program interactive="no" language="python" line-numbers="no">
                <input>
variable = value
                </input>
            </program>
        </listing>
        <p>
            The <c>variable</c> part just refers to the name of the variable, so it can be something generic like <c>x</c> or something
            descriptive like <c>theNumberOfTiles</c>. The important thing from the computer's point of view is that there are no spaces
            and that it starts with a letter. (There are other restrictions, like not using special symbols and things like that,
            but unless you're trying make things complicated, you're unlikely to violate them.) In Python, variables are case-sensitive,
            meaning that <c>theVariable</c> and <c>thevariable</c> are two different variables.
        </p>
        <aside>
            <p>
                <idx><h>camel case</h></idx>
                The practice of naming variables using capital letters at the start of each word like <c>theNumberOfTiles</c> is known as
                <term>camel case</term>.
            </p>
        </aside>
        <p>
            <idx><h>subroutine</h></idx>
            The other type of process that we have is a <term>subroutine</term>. This is a command that runs a more complex piece of code. This is where
            most of the hard work of programming is done, which also means that this is the part we're going to gloss over the most in this
            class. For the things we do, we'll use descriptive names for our processes so that you can have an intuitive sense of what's
            happening without needing to go through the details.
        </p>
        <p>
            Subroutines will often look like an instruction on its own line, and it will always have parentheses. Here is an example:
        </p>
        <listing>
            <caption>Running a Subroutine</caption>
            <program interactive="no" language="python" line-numbers="no">
                <input>
doSomethingInteresting()
                </input>
            </program>
        </listing>
        <p>
            As you can see, this function does something interesting. Obviously, in practice we will be using names that are relevant
            to the type of program that we are writing. 
        </p>
        <p>
            <idx><h>parameters (programming)</h></idx>
            Some subroutines will be given input variables known as <term>parameters</term>, which are values that help the subroutine perform
            the appropriate task. These parameters will always be inside of parentheses, 
        </p>
        <aside>
            <p>
                Subroutines can either be functions or methods, depending on the context. But that distinction doesn't matter at this level.
            </p>
        </aside>
        <p>
            It is possible to do both actions at once. That is, you can assign the value of a variable using a subroutine.
        </p>
    </subsection>

    <worksheet xml:id="Intro-Programming-wksht">
		<title>Exercises</title>
        <exercisegroup>
            <title>STUFF</title>
            <exercise>
                <p>
                    What would you do to replace random choice for the greedy algorithm?
                </p>
            </exercise>
        </exercisegroup>
    </worksheet>

</section>
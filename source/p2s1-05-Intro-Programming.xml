<section xml:id="Intro-Programming" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>An Introduction to Programming</title>

    <objectives>
        <ul>
            <li>
                <p>
                    You will learn that programming is getting a computer to follow a flowchart.
                </p>
            </li>
        </ul>
    </objectives>

    <observation>
        <p>
            The following video is from the first lecture of a course in computer programming (CS 50) at Harvard from
            2018. Watch the whole thing. (6 minutes, 17 seconds)
        </p>
        <figure>
            <title>peanut-butter-jelly</title>
            <video youtube="okkIyWhN0iQ">
            </video>
            <caption>CS50 2018 - Lecture 1 - Peanut Butter and Jelly</caption>
        </figure>
        <p>
            What was the point of the demonstration?
        </p>
    </observation>

    <subsection>
        <title>What is Compupter Programming?</title>
        <p>
            Computer programming is basically the process of giving the computer instructions to follow in order to
            complete a specific task. People can spend multiple years trying to become proficient at programming, and so it
            is far beyond the scope of this class to teach you how to program. That said, the underlying logic of computer
            programming is within reach, and it's something that we have already started to investigate in the previous
            section.
        </p>
        <p>
            <idx><h>programming language</h></idx>
            <idx><h>Python</h></idx>
            Each of the flowcharts we created is a set of instructions to be followed in odrer to complete a specific task.
            The only gap between understanding those flowcharts and computer programming is understanding how to get the
            computer to follow the flowchart. The specific way that this is done is through something called a
            <term>programming language</term>, which is basically a translation tool that runs between humans and computers.
            While there are many languages that are available, we will use <term>Python</term> because it is among the
            easier languages to use when getting started in programming.
        </p>
        <p>
            There are a number of ways to get access to Python. If you wanted to download a version of it to your computer,
            you can find a number of packages that will do it for you (for example, Anaconda Python is popular for data
            science). If you do this, you will need to understand enough about your computer to navigate the process. 
            Alternatively, you can use a online Python interpreter, which handles all of that for you. And this is the route
            that we will recommend.
        </p>
        <p>
            <idx><h>Replit</h></idx>
            The materials for this course will be housed at <url href="https://github.com">GitHub</url> and you will be able
            to run them using <url href="https://replit.com">Replit</url>. Viewing the files will not require an account, but
            running them will. (Basic accounts are free at the time of writing.) This will make them accessible to everyone with
            access to the internet without the hassle of needing to install programs onto their computer.
        </p>
        <p>
            This is not a course in programming, so there will be many topics and ideas that will be glossed over. The
            primary goal is for you to understand the large-scale structures of programming without getting lost in the
            details. If you already have programming experience, you may find it interesting to look through the files to
            get a deeper understanding of how things are set up, but this is not necessary to be successful in the course.
            (One of the goals was to make the high level code as human-readable as possible, so you will find that there
            are a lot of unnecessary functions that clutter things up. None of the code is meant to be taken as an example
            of coding best practices!)
        </p>
    </subsection>
    <subsection>
        <title>Subroutines</title>

        <p>
            If we look at flowchart, there are some places where the program just runs through a sequence of steps. When process A is completed,
            the computer moves straight to process B. This is shown in the flowchart below:
        </p>
        <image xml:id="flow-through-flowchart" width="50%">
            <latex-image>
                \begin{tikzpicture}[node distance=5cm]

                    \node (A) [process] {Process A};
                    \node (B) [process, right of=A] {Process B};
                    \draw[-latex] (A) -- (B);
                \end{tikzpicture}
            </latex-image>
        </image>
        <p>
            In programming, these processes can represent any of a large number of commands, both simple
            and complicated. We will see some examples of this in the next section. But for now, we're going
            to focus on the concepts.
        </p>
        <p>
            <idx><h>subroutine</h></idx>
            A process might be a single command, such as multiplying a number by 2. However, a process
            can also be a complex sequence of steps, including making decisions. These more complex commands
            are often called <term>subroutines</term>. Here are a couple processes for making a sandwich:
        </p>
        <image xml:id="pbj-flowchart" width="50%">
            <latex-image>
                \begin{tikzpicture}[node distance=5cm]

                    \node (A) [process] {Spread peanut butter on the bread};
                    \node (B) [process, right of=A] {Spread jelly on the bread};
                    \draw[-latex] (A) -- (B);
                \end{tikzpicture}
            </latex-image>
        </image>
        <p>
            As we saw in the video, each of those commands is a complicated sequence of steps, including
            opening the jar, using a knife properly, and closing the jar when finished. But at least at
            this level, you can understand what the goal is, even if the details are not fully
            known or understood.
        </p>
    </subsection>
    <subsection>
        <title>If-Then Statements</title>
        <p>
            <idx><h>control flow (programming)</h></idx>
            <idx><h>flow of control (programming)</h></idx>
            <idx><h>if-then statement (programming)</h></idx>
            Within the world of computer programming is the concept of "control flow" (or "flow of control"). This is basically
            the idea of how the computer navigates the flowcharts. Although there are mutiple structures that can be used to
            accomplish this (for example, loops and subroutines), we are going to focus on the if-then statement. This is the basic
            mechanism for "choice" in a program.
        </p>
        <p>
            However, there are places in a flowchart where there is a branch. This is related to some sort of decision mechanism. In
            the previous section, we they were framed as Yes/No decisions, but in the programming world these are framed as True/False
            statements. The statement is a declaration, like "The number is even" or "There are at least 5 objects in the collection".
            The computer determines whether the declaration is true or false, and then proceeds along the flowchart based on that
            determination. Here's how that looks:
        </p>
        <image xml:id="branching-flowchart" width="50%">
            <latex-image>
                \begin{tikzpicture}[node distance=5cm]
                    \node (statement) [decision] {Statement};
                    \node (A) [process, right of=statement] {Process A};
                    \node (B) [process, below of=statement,yshift=2cm] {Process B};
                    \draw[-latex] (statement) -- (A) node[midway,anchor=south] {True};
                    \draw[-latex] (statement) -- (B) node[midway,anchor=west] {False};
                \end{tikzpicture}
            </latex-image>
        </image>
        <p>
            There are other branching schemes that lead to more than two pathways, such as if-then-else and switch statements, but
            we're not going to worry about those. For our purposes, we can just think of them as combinations of if-then statements.
        </p>
    </subsection>
    <conclusion>
        At a certain level, all of computer programming can be broken down into these two concepts. There are
        processes (subroutines) to execute in some order, and sometimes the program will branch off depending
        on certain conditions. From here, the devil is in the details.
    </conclusion>

    <worksheet xml:id="Intro-Programming-wksht">
		<title>Exercises</title>
        <exercisegroup>
            <title>STUFF</title>
            <exercise>
                <p>
                    What would you do to replace random choice for the greedy algorithm?
                </p>
            </exercise>
        </exercisegroup>
    </worksheet>

</section>